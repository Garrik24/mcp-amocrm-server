from fastapi import FastAPI, HTTPException, Header, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List, Union
import os
import aiohttp
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="AmoCRM MCP Server",
    description="–°–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM API —á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω",
    version="3.0.0"
)

# CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è LLM/–±—Ä–∞—É–∑–µ—Ä–æ–≤; –ø—Ä–∏ –ø—Ä–æ–¥–µ –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ–º–µ–Ω—ã)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
AMOCRM_SUBDOMAIN = os.getenv("AMOCRM_SUBDOMAIN", "stavgeo26")
AMOCRM_ACCESS_TOKEN = os.getenv("AMOCRM_ACCESS_TOKEN")  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class EntityRequest(BaseModel):
    entity_type: str = Field(..., description="–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: leads, contacts, companies, tasks, customers")
    method: str = Field(..., description="–ú–µ—Ç–æ–¥: get, create, update, delete")
    entity_id: Optional[int] = Field(None, description="ID —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è get/update/delete")
    # AmoCRM v4 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ dict, –∏ list[dict]
    data: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = Field(
        None,
        description="–î–∞–Ω–Ω—ã–µ –¥–ª—è create/update. –†–∞–∑—Ä–µ—à–µ–Ω—ã object –∏–ª–∏ array of objects (–¥–ª—è v4 POST).",
    )
    params: Optional[Dict[str, Any]] = Field(None, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è get")

class WebhookData(BaseModel):
    leads: Optional[Dict[str, Any]] = None
    contacts: Optional[Dict[str, Any]] = None
    companies: Optional[Dict[str, Any]] = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
sessions = {}

@app.get("/")
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "active",
        "service": "AmoCRM MCP Server",
        "version": "3.0.0",
        "subdomain": AMOCRM_SUBDOMAIN,
        "token_status": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω" if AMOCRM_ACCESS_TOKEN else "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
        "endpoints": {
            "account": "/api/account",
            "entities": "/api/entities",
            "pipelines": "/api/pipelines",
            "users": "/api/users",
            "custom_fields": "/api/custom_fields",
            "webhooks": "/webhooks/receive"
        }
    }

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Railway"""
    return {"status": "healthy", "timestamp": int(time.time())}

@app.get("/debug/mcp-status")
async def mcp_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    mcp_enabled = False
    mcp_error = None
    
    try:
        from mcp_server import app as mcp_app
        from mcp.server.sse import SseServerTransport
        mcp_enabled = True
    except Exception as e:
        mcp_error = str(e)
    
    return {
        "mcp_enabled": mcp_enabled,
        "mcp_error": mcp_error,
        "mcp_endpoint": "/mcp/sse" if mcp_enabled else None,
        "mcp_version": "1.17.0" if mcp_enabled else None
    }

# ===================== MCP over HTTP (–¥–ª—è ChatGPT Connectors –∏ –ª—é–±—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ MCP –ø–æ —Å–µ—Ç–∏) =====================
# –†–µ–∞–ª–∏–∑—É–µ–º SSE/POST —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç MCP –ø–æ –∞–¥—Ä–µ—Å—É /mcp
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à MCP-—Å–µ—Ä–≤–µ—Ä (—Ä–µ–µ—Å—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤) –∏ HTTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ mcp
    from mcp_server import app as mcp_app
    from mcp.server.sse import SseServerTransport, TransportSecuritySettings

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç SSE
    security = TransportSecuritySettings(enable_dns_rebinding_protection=False)
    sse_transport = SseServerTransport(endpoint="/messages", security_settings=security)

    # –°–æ–∑–¥–∞–µ–º ASGI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /mcp/*
    async def mcp_asgi_app(scope, receive, send):
        """ASGI middleware –¥–ª—è MCP endpoints"""
        path = scope.get("path", "")
        method = scope.get("method", "GET")
        
        logger.info(f"üì° MCP ASGI called: {method} {path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å /mcp/ –∏–ª–∏ / - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        if (path == "/" or path == "") and method == "GET":
            logger.info("‚ÑπÔ∏è MCP info request")
            import json
            response_data = json.dumps({
                "name": "AmoCRM MCP Server",
                "version": "3.0.0",
                "protocol": "mcp",
                "endpoints": {
                    "sse": "/mcp/sse",
                    "messages": "/mcp/messages"
                },
                "status": "ready"
            }).encode()
            await send({
                "type": "http.response.start",
                "status": 200,
                "headers": [[b"content-type", b"application/json"]],
            })
            await send({
                "type": "http.response.body",
                "body": response_data,
            })
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SSE endpoint
        elif (path == "/sse" or path == "/mcp/sse" or path.endswith("/sse")) and method == "GET":
            logger.info("üîå Connecting SSE stream...")
            async with sse_transport.connect_sse(scope, receive, send) as (read_stream, write_stream):
                await mcp_app.run(
                    read_stream,
                    write_stream,
                    mcp_app.create_initialization_options(),
                )
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST messages
        elif (path == "/messages" or path == "/mcp/messages" or path.endswith("/messages")) and method == "POST":
            logger.info("üì® Handling POST message...")
            await sse_transport.handle_post_message(scope, receive, send)
        else:
            # 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            logger.warning(f"‚ùå Unknown MCP path: {method} {path}")
            await send({
                "type": "http.response.start",
                "status": 404,
                "headers": [[b"content-type", b"text/plain"]],
            })
            await send({
                "type": "http.response.body",
                "body": f"Not Found: {path}. Use /mcp/, /mcp/sse or /mcp/messages".encode(),
            })
    
    # –ú–æ–Ω—Ç–∏—Ä—É–µ–º ASGI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.mount("/mcp", mcp_asgi_app)
    
    logger.info("‚úÖ MCP HTTP transport enabled at /mcp/sse and /mcp/messages")
except Exception as _mcp_http_err:
    # –ï—Å–ª–∏ MCP HTTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º. REST API –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
    logger.error(f"‚ùå MCP HTTP transport not enabled: {_mcp_http_err}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

async def make_amocrm_request(endpoint: str, method: str = "GET", data: Dict = None, params: Dict = None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AmoCRM API"""
    if not AMOCRM_ACCESS_TOKEN:
        raise HTTPException(status_code=400, detail="AmoCRM access token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    url = f"https://{AMOCRM_SUBDOMAIN}.amocrm.ru{endpoint}"
    headers = {
        "Authorization": f"Bearer {AMOCRM_ACCESS_TOKEN}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    async with aiohttp.ClientSession() as session:
        try:
            if method.upper() == "GET":
                async with session.get(url, headers=headers, params=params) as response:
                    if response.status == 204:
                        return {"status": "no_content", "code": 204}
                    try:
                        return await response.json()
                    except Exception:
                        return {"code": response.status, "text": await response.text()}
            elif method.upper() == "POST":
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 204:
                        return {"status": "no_content", "code": 204}
                    try:
                        return await response.json()
                    except Exception:
                        return {"code": response.status, "text": await response.text()}
            elif method.upper() == "PATCH":
                async with session.patch(url, headers=headers, json=data) as response:
                    if response.status == 204:
                        return {"status": "no_content", "code": 204}
                    try:
                        return await response.json()
                    except Exception:
                        return {"code": response.status, "text": await response.text()}
            elif method.upper() == "DELETE":
                async with session.delete(url, headers=headers) as response:
                    if response.status in (200, 202, 204):
                        # –£ AmoCRM –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–æ 204 –∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                        return {"status": "deleted", "code": response.status}
                    try:
                        return await response.json()
                    except Exception:
                        return {"code": response.status, "text": await response.text()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AmoCRM: {str(e)}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AmoCRM: {str(e)}")

@app.get("/api/account")
async def get_account(authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    try:
        result = await make_amocrm_request("/api/v4/account")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        return {"error": str(e), "status": "error"}

@app.post("/api/entities")
async def handle_entities(request: EntityRequest, authorization: Optional[str] = Header(None)):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏ AmoCRM"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º endpoint
        endpoint = f"/api/v4/{request.entity_type}"
        if request.entity_id:
            endpoint += f"/{request.entity_id}"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        if request.method.lower() == "get":
            result = await make_amocrm_request(endpoint, "GET", params=request.params)
        elif request.method.lower() in ["post", "create"]:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–ª—è POST –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            payload = request.data
            if payload is None:
                payload = []
            if isinstance(payload, dict):
                payload = [payload]
            result = await make_amocrm_request(endpoint, "POST", data=payload)
        elif request.method.lower() in ["patch", "update"]:
            payload = request.data
            if payload is None:
                payload = []
            if isinstance(payload, dict):
                payload = [payload]
            result = await make_amocrm_request(endpoint, "PATCH", data=payload)
        elif request.method.lower() == "delete":
            result = await make_amocrm_request(endpoint, "DELETE")
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥")
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏: {str(e)}")
        return {"error": str(e), "status": "error"}

@app.delete("/api/entities/{entity_type}/{entity_id}")
async def delete_entity(entity_type: str, entity_id: int, authorization: Optional[str] = Header(None)):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ DELETE (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è AmoCRM v4)."""
    try:
        endpoint = f"/api/v4/{entity_type}/{entity_id}"
        result = await make_amocrm_request(endpoint, "DELETE")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {entity_type}/{entity_id}: {str(e)}")
        return {"error": str(e), "status": "error"}

@app.get("/api/pipelines")
async def get_pipelines(pipeline_id: Optional[int] = Query(None), authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂"""
    try:
        endpoint = "/api/v4/leads/pipelines"
        if pipeline_id:
            endpoint += f"/{pipeline_id}"
        
        result = await make_amocrm_request(endpoint, "GET")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫: {str(e)}")
        return {"error": str(e), "status": "error"}

@app.get("/api/users")
async def get_users(user_id: Optional[int] = Query(None), authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        endpoint = "/api/v4/users"
        if user_id:
            endpoint += f"/{user_id}"
        
        result = await make_amocrm_request(endpoint, "GET")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        return {"error": str(e), "status": "error"}

@app.get("/api/custom_fields/{entity_type}")
async def get_custom_fields(entity_type: str, authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏"""
    try:
        endpoint = f"/api/v4/{entity_type}/custom_fields"
        result = await make_amocrm_request(endpoint, "GET")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π: {str(e)}")
        return {"error": str(e), "status": "error"}

@app.post("/webhooks/receive")
async def receive_webhook(data: WebhookData):
    """–ü—Ä–∏—ë–º –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç AmoCRM"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–µ–±—Ö—É–∫–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.
    
    return {"status": "received"}


@app.get("/api/report/deals")
async def get_deals_report(
    query: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫"),
    created_at_from: Optional[int] = Query(None, description="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (Unix Timestamp) —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
    updated_at_from: Optional[int] = Query(None, description="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (Unix Timestamp) —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
    status_id: Optional[int] = Query(None, description="ID —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ (—ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏)"),
    pipeline_id: Optional[int] = Query(None, description="ID –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"),
    authorization: Optional[str] = Header(None)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å—É, –≤–æ—Ä–æ–Ω–∫–µ –∏ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AmoCRM API
        params = {}
        
        if query:
            params["query"] = query
        if created_at_from:
            params["filter[created_at][from]"] = created_at_from
        if updated_at_from:
            params["filter[updated_at][from]"] = updated_at_from
        if status_id:
            params["filter[statuses][0][status_id]"] = status_id
        if pipeline_id:
            params["filter[statuses][0][pipeline_id]"] = pipeline_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        params["with"] = "contacts,companies"
        params["limit"] = 50
        
        result = await make_amocrm_request("/api/v4/leads", "GET", params=params)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –æ—Ç–≤–µ—Ç—É
        if "_embedded" in result and "leads" in result["_embedded"]:
            leads = result["_embedded"]["leads"]
            total_amount = sum(lead.get("price", 0) for lead in leads)
            
            return {
                "leads": leads,
                "summary": {
                    "total_count": len(leads),
                    "total_amount": total_amount,
                    "filters_applied": {
                        "query": query,
                        "created_at_from": created_at_from,
                        "updated_at_from": updated_at_from,
                        "status_id": status_id,
                        "pipeline_id": pipeline_id
                    }
                },
                "page_info": result.get("_page", {}),
                "_links": result.get("_links", {})
            }
        else:
            return result
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º: {str(e)}")
        return {"error": str(e), "status": "error"}


@app.get("/api/contacts/search")
async def search_contacts(
    query: str = Query(..., description="Email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞"),
    limit: int = Query(10, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    authorization: Optional[str] = Header(None)
):
    """
    –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ email, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –∏–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    try:
        result = await make_amocrm_request(
            "/api/v4/contacts",
            "GET",
            params={"query": query, "limit": limit, "with": "leads"}
        )
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}")
        return {"error": str(e), "status": "error"}


@app.post("/api/contacts/check-exists")
async def check_contact_exists(
    query: str = Query(..., description="Email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"),
    authorization: Optional[str] = Header(None)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –µ–≥–æ ID –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω.
    """
    try:
        result = await make_amocrm_request(
            "/api/v4/contacts",
            "GET",
            params={"query": query, "limit": 1}
        )
        
        exists = False
        contact_id = None
        contact_data = None
        
        if "_embedded" in result and "contacts" in result["_embedded"]:
            contacts = result["_embedded"]["contacts"]
            if len(contacts) > 0:
                exists = True
                contact_id = contacts[0]["id"]
                contact_data = contacts[0]
        
        return {
            "exists": exists,
            "contact_id": contact_id,
            "contact": contact_data,
            "query": query
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")
        return {"error": str(e), "status": "error"}


@app.post("/api/contacts/get-or-create")
async def get_or_create_contact(request: Dict[str, Any]):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.
    –£–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –ø–æ query, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - —Å–æ–∑–¥–∞–µ—Ç.
    
    Body:
    {
        "query": "email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        "name": "–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        "email": "email@example.com",
        "phone": "+79991234567"
    }
    """
    try:
        query = request.get("query")
        if not query:
            return {"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä query –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω", "status": "error"}
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        search_result = await make_amocrm_request(
            "/api/v4/contacts",
            "GET",
            params={"query": query, "limit": 1}
        )
        
        if "_embedded" in search_result and "contacts" in search_result["_embedded"]:
            contacts = search_result["_embedded"]["contacts"]
            if len(contacts) > 0:
                return {
                    "found": True,
                    "created": False,
                    "contact": contacts[0]
                }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        contact_data = {
            "name": request.get("name", "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
        }
        
        custom_fields = []
        if "email" in request:
            custom_fields.append({
                "field_code": "EMAIL",
                "values": [{"value": request["email"], "enum_code": "WORK"}]
            })
        if "phone" in request:
            custom_fields.append({
                "field_code": "PHONE",
                "values": [{"value": request["phone"], "enum_code": "WORK"}]
            })
        
        if custom_fields:
            contact_data["custom_fields_values"] = custom_fields
        
        create_result = await make_amocrm_request(
            "/api/v4/contacts",
            "POST",
            data=[contact_data]
        )
        
        return {
            "found": False,
            "created": True,
            "contact": create_result
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ get_or_create_contact: {str(e)}")
        return {"error": str(e), "status": "error"}


@app.post("/api/leads/create-with-contact")
async def create_lead_with_contact(request: Dict[str, Any]):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ).
    –ï—Å–ª–∏ contact_id —É–∫–∞–∑–∞–Ω - —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
    –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤–º–µ—Å—Ç–µ —Å–æ —Å–¥–µ–ª–∫–æ–π.
    
    Body:
    {
        "lead_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏",
        "lead_price": 10000,
        "contact_id": 123456,  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        "contact_name": "–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞",  // –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        "contact_email": "email@example.com",
        "contact_phone": "+79991234567"
    }
    """
    try:
        lead_data = {
            "name": request.get("lead_name", "–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞")
        }
        
        if "lead_price" in request:
            lead_data["price"] = request["lead_price"]
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if "contact_id" in request:
            lead_data["_embedded"] = {
                "contacts": [{"id": request["contact_id"]}]
            }
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤–º–µ—Å—Ç–µ —Å–æ —Å–¥–µ–ª–∫–æ–π
            contact_data = {
                "name": request.get("contact_name", "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
            }
            
            custom_fields = []
            if "contact_email" in request:
                custom_fields.append({
                    "field_code": "EMAIL",
                    "values": [{"value": request["contact_email"], "enum_code": "WORK"}]
                })
            if "contact_phone" in request:
                custom_fields.append({
                    "field_code": "PHONE",
                    "values": [{"value": request["contact_phone"], "enum_code": "WORK"}]
                })
            
            if custom_fields:
                contact_data["custom_fields_values"] = custom_fields
            
            lead_data["_embedded"] = {
                "contacts": [contact_data]
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º complex endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        result = await make_amocrm_request(
            "/api/v4/leads/complex",
            "POST",
            data=[lead_data]
        )
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: {str(e)}")
        return {"error": str(e), "status": "error"}


@app.post("/api/smart/client-and-lead")
async def smart_create_client_and_lead(request: Dict[str, Any]):
    """
    –£–ú–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–¥–µ–ª–∫–æ–π.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É
    2. –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
    4. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
    
    Body:
    {
        "contact_query": "email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        "contact_name": "–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        "contact_email": "email@example.com",
        "contact_phone": "+79991234567",
        "lead_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏",
        "lead_price": 10000,
        "check_existing_leads": true  // –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –Ω–∞–ª–∏—á–∏–µ —Å–¥–µ–ª–æ–∫
    }
    """
    try:
        query = request.get("contact_query")
        if not query:
            return {"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä contact_query –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω", "status": "error"}
        
        steps = []
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        steps.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞...")
        search_result = await make_amocrm_request(
            "/api/v4/contacts",
            "GET",
            params={"query": query, "limit": 1, "with": "leads"}
        )
        
        contact_id = None
        contact_exists = False
        
        if "_embedded" in search_result and "contacts" in search_result["_embedded"]:
            contacts = search_result["_embedded"]["contacts"]
            if len(contacts) > 0:
                contact_exists = True
                contact_id = contacts[0]["id"]
                steps.append(f"‚úì –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω (ID: {contact_id})")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not contact_exists:
            steps.append("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞...")
            contact_data = {
                "name": request.get("contact_name", "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
            }
            
            custom_fields = []
            if "contact_email" in request:
                custom_fields.append({
                    "field_code": "EMAIL",
                    "values": [{"value": request["contact_email"], "enum_code": "WORK"}]
                })
            if "contact_phone" in request:
                custom_fields.append({
                    "field_code": "PHONE",
                    "values": [{"value": request["contact_phone"], "enum_code": "WORK"}]
                })
            
            if custom_fields:
                contact_data["custom_fields_values"] = custom_fields
            
            create_result = await make_amocrm_request(
                "/api/v4/contacts",
                "POST",
                data=[contact_data]
            )
            
            if "_embedded" in create_result and "contacts" in create_result["_embedded"]:
                contact_id = create_result["_embedded"]["contacts"][0]["id"]
                steps.append(f"‚úì –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω (ID: {contact_id})")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–¥–µ–ª–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        should_create_lead = True
        if request.get("check_existing_leads", True) and contact_id:
            steps.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–æ–∫...")
            leads_result = await make_amocrm_request(
                "/api/v4/leads",
                "GET",
                params={
                    "filter[contacts][0]": contact_id,
                    "limit": 1
                }
            )
            
            if "_embedded" in leads_result and "leads" in leads_result["_embedded"]:
                leads = leads_result["_embedded"]["leads"]
                if len(leads) > 0:
                    should_create_lead = False
                    steps.append(f"! –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å —Å–¥–µ–ª–∫–∏ ({len(leads)} —à—Ç.)")
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        lead_result = None
        if should_create_lead and contact_id:
            steps.append("–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏...")
            lead_data = {
                "name": request.get("lead_name", "–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"),
                "_embedded": {
                    "contacts": [{"id": contact_id}]
                }
            }
            
            if "lead_price" in request:
                lead_data["price"] = request["lead_price"]
            
            lead_result = await make_amocrm_request(
                "/api/v4/leads",
                "POST",
                data=[lead_data]
            )
            
            if "_embedded" in lead_result and "leads" in lead_result["_embedded"]:
                lead_id = lead_result["_embedded"]["leads"][0]["id"]
                steps.append(f"‚úì –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: {lead_id})")
        
        return {
            "success": True,
            "steps": steps,
            "contact_id": contact_id,
            "contact_was_created": not contact_exists,
            "lead_was_created": should_create_lead,
            "lead_result": lead_result
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ smart_create_client_and_lead: {str(e)}")
        return {"error": str(e), "status": "error", "steps": steps}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

